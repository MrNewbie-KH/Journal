// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma format to format 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // default attributes
  id                      String           @id @default(uuid())
  email                   String           @unique
  phone                   String?          @unique //how to handle validation 
  firstName               String           @db.VarChar(20)
  lastName                String           @db.VarChar(20)
  isAdmin                 Boolean          @default(false)
  image                   String           @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_640.png")
  password                String
  passwordChangedAt       DateTime?
  // --------------
  accountIsVerified       Boolean          @default(false)
  verificationToken       String?
  // --------------
  passwordResetToken       String?
  passwordResetExpireDate DateTime?
  // --------------
  // attributes from relations
  posts                   Post[]
  comments                Comment[]
  likedPosts              Like[] // from many to many
  favouritePosts          FavouritePosts[] //from many to many
  replyOnComment          Reply[] //from many to many

  // from recursive relationship
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
}

model Post {
  id                   String           @id @default(uuid())
  content              String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  poster               String?
  title                String           @db.VarChar(100)
  writer               User             @relation(fields: [writerId], references: [id])
  writerId             String
  comment              Comment[]
  userLikedPost        Like[] // from many to many 
  userAddedToFavourite FavouritePosts[] //from many to many
  category             Category[]  //from many to many but implicit
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  userReplyToComment Reply[] //from many to many
}

model Category {
  id    String         @id @default(uuid())
  name  String         @db.VarChar(30)
  posts Post[]             //from many to many but implicit
}

// Many to many relationships
model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
}

model FavouritePosts {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
}

model Reply {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  post      Comment @relation(fields: [commentId], references: [id])
  commentId String

  content String

  @@id([userId, commentId])
}


// recursive relationship
model Follow {
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String

  @@id([followerId, followingId])
}
